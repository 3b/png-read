Portable Network Graphics (PNG) decoder (more or less) for Common Lisp.

All critical  chunks are implemented.  Some ancillary chunks  are. No interlacing is  implemented. It
should be able to read back any file produced by ZPNG.

Usage: read-png-file (file)  and read-png-datastream (stream), both return a  png-state object and a
boolean to  indicate if CRC  was successful,  which most interesting  property is image-data,  a two
(grayscale) or  three dimensional array containing  image data. Other properties  are width, height,
bit-depth and colour-type. Palette is available, but the data array will already be decoded to colors.

Note that ancillary chunks are mostly untested. They never modify primary image data array directly,
but provide additional information in slots of png-state object.

Ancillary chunks: 
  tRNS - if present, additional alpha map is stored in slot transparency 
  gAMA - if  present, image gamma is stored in slot gamma 
  sBIT - if present, the original number of significant bits is stored 
         in slot significant-bits as a property list
  sRGB - if present, rendering intent is storen in slot rendering-intent as a keyword symbol
  tEXt - if present, text strings are collected in slot textual-data as an association list of keyword 
         and string
  zTXt - if present, text strings are collected in slot textual-data as an association list of keyword 
         and string
  iTXt - if present, text strings are collected in slot texttual-data as an association list of keyword 
         and a list of language tag, translated keyword and translated text
  bKGD - if present, preferred background is stored in slot preferred-background as an array of color 
         components (RGB), greyscale datum or palette index
  hIST - if present, image histogram is stored in slot image-histogram as an array
  pHYS - if present, intended pixel size is stored in slot physical-dimensions as a property list
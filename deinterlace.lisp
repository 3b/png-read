(in-package :png-read)

(defvar *adam7* #2A((1 6 4 6 2 6 4 6)
		    (7 7 7 7 7 7 7 7)
		    (5 6 5 6 5 6 5 6)
		    (7 7 7 7 7 7 7 7)
		    (3 6 4 6 3 6 4 6)
		    (7 7 7 7 7 7 7 7)
		    (5 6 5 6 5 6 5 6)
		    (7 7 7 7 7 7 7 7)))

(defun make-interlace-pass-array (w h)
  (let ((i-array (make-array (list w h) :initial-element 0)))
    (dotimes (x w i-array)
      (dotimes (y h)
	(setf (aref i-array x y)
	      (aref *adam7* (mod x 8) (mod y 8)))))))

(defun make-deinterlace-arrays (pass-array)
  (let ((leaves (make-array 7 :initial-element nil)))
   (destructuring-bind (w h) (array-dimensions pass-array)
     (dotimes (x w (map 'vector #'nreverse leaves))
       (dotimes (y h)
	 (push (list x y) (aref leaves (1- (aref pass-array x y)))))))))

(defun get-width-passlist (pass-list)
  (let ((init-x (caar pass-list)))
    (iter (for d in pass-list)
	  (while (eql init-x (car d)))
	  (summing 1))))
